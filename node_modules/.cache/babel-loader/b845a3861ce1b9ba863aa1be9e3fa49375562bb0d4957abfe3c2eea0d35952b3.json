{"ast":null,"code":"var _jsxFileName = \"C:\\\\Veterans Center\\\\veteran-app\\\\frontend\\\\src\\\\components\\\\checklist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Search from './searchfunction';\nimport './checklist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SecurePage = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Function to fetch data from the server\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/api/data/scan');\n      const result = await response.json();\n      setData(result);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Benefits to required documents logic\n  const requiredDocsMapping = {\n    'Chapter 30': ['COE', 'Enrollment Manager', 'Schedule'],\n    'Chapter 31': ['Enrollment Manager', 'Schedule'],\n    'Chapter 33 Post 9/11': ['COE', 'Enrollment Manager', 'Schedule'],\n    'Chapter 35': ['COE', 'Enrollment Manager', 'Schedule'],\n    'Fed TA': ['TAR', 'Enrollment Manager', 'Schedule'],\n    'State TA': ['Award Letter', 'Enrollment Manager', 'Schedule'],\n    'Missouri Returning Heroes': ['DD214', 'Enrollment Manager', 'Schedule']\n  };\n\n  // Load data on component mount\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Filter data based on search term\n  const filteredData = data.filter(item => {\n    const fullName = item[\"Last Name, First Name (Legal Name)\"];\n    if (!fullName) return false;\n    const [lastName, firstName] = fullName.split(',').map(name => name.trim());\n    const displayName = `${firstName} ${lastName}`;\n    return displayName.toLowerCase().startsWith(searchTerm.toLowerCase());\n  });\n\n  // Clean benefit function (maps benefit name to key in requiredDocsMapping)\n  const cleanBenefit = benefit => {\n    if (benefit.includes(\"Missouri Returning Heroes\")) {\n      return \"Missouri Returning Heroes\";\n    } else if (benefit.includes(\"Chapter 33 Post 9/11\")) {\n      return \"Chapter 33 Post 9/11\";\n    } else if (benefit.includes(\"Chapter 31 VocRehab\")) {\n      return \"Chapter 31\";\n    } else if (benefit.includes(\"State Tuition Assistance Deadline\")) {\n      return \"State TA\";\n    } else if (benefit.includes(\"Chapter 35\")) {\n      return \"Chapter 35\";\n    } else if (benefit.includes(\"Chapter 30 MGIB\")) {\n      return \"Chapter 30\";\n    } else if (benefit.includes(\"Federal Tuition Assistance Deadline\")) {\n      return \"Fed TA\";\n    } else {\n      return benefit; // Fallback if benefit is not mapped\n    }\n  };\n\n  // Function to filter, clean, and join benefits\n  const getCleanedBenefits = benefits => {\n    if (typeof benefits !== 'string') return '';\n    return benefits.split(';').map(benefit => benefit.trim()) // Clean individual benefit\n    .map(cleanBenefit) // Apply the cleanBenefit function\n    .filter(Boolean) // Remove any empty strings\n    .join('; '); // Join the cleaned benefits with a semicolon and space\n  };\n\n  // Function to get required documents based on cleaned benefits\n  const getRequiredDocs = benefitString => {\n    if (typeof benefitString !== 'string') {\n      return []; // Return empty array if benefitString is invalid\n    }\n    const benefits = benefitString.split(';').map(benefit => benefit.trim());\n    const requiredDocsSet = new Set(); // Use a Set to avoid duplicates\n\n    benefits.forEach(benefit => {\n      const cleanedBenefit = cleanBenefit(benefit);\n      const docs = requiredDocsMapping[cleanedBenefit];\n      if (docs) {\n        docs.forEach(doc => requiredDocsSet.add(doc)); // Add docs to the set\n      }\n    });\n    return Array.from(requiredDocsSet); // Convert the set back to an array\n  };\n\n  // Function to toggle the checkbox and update benefit box style\n  const handleCheckboxChange = (checkboxId, benefitId) => {\n    const checkbox = document.getElementById(checkboxId);\n    const benefitBox = document.getElementById(benefitId);\n    if (checkbox.checked) {\n      benefitBox.classList.add('active');\n    } else {\n      benefitBox.classList.remove('active');\n    }\n  };\n\n  // Function to update the date when the checkbox is checked\n  const updateDate = studentID => {\n    const dateBox = document.getElementById(`date-checked-${studentID}`);\n    const checkbox = document.getElementById(`date-${studentID}`);\n    const currentDate = new Date().toLocaleString('default', {\n      month: '2-digit',\n      day: '2-digit'\n    });\n    if (checkbox.checked) {\n      dateBox.textContent = currentDate;\n    } else {\n      dateBox.textContent = '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"secure-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://i.imgur.com/SROEj2Q.jpeg\",\n        alt: \"Company Logo\",\n        className: \"company-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Search, {\n        searchTerm: searchTerm,\n        setSearchTerm: setSearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), filteredData.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"data-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"red-header\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"red-header\",\n              children: \"Student ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"red-header\",\n              children: \"Benefit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"red-header\",\n              children: \"Required Documents\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredData.map((item, index) => {\n            const fullName = item[\"Last Name, First Name (Legal Name)\"] || 'Unknown';\n            const [lastName, firstName] = fullName.split(',').map(name => name.trim());\n            const displayName = `${firstName} ${lastName}`;\n            const studentID = item[\"Student ID # (This is NOT your Social Security Number or SSO ID)\"] || 'N/A';\n            const benefits = item[\"Benefit you plan to utilize this term (check all that apply):\"];\n            const requiredDocs = getRequiredDocs(benefits);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: displayName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: studentID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: getCleanedBenefits(benefits)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [requiredDocs.length > 0 ? requiredDocs.map((doc, docIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"checkbox-container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    id: `${doc}-${studentID}`,\n                    onChange: () => handleCheckboxChange(`${doc}-${studentID}`, `box-${doc}-${studentID}`)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: `${doc}-${studentID}`,\n                    children: \"Added\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"benefit-box\",\n                    id: `box-${doc}-${studentID}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: doc\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 164,\n                      columnNumber: 21\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 17\n                  }, this)]\n                }, docIndex, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 13\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"No documents required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 9\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    id: `date-${studentID}`,\n                    onChange: () => updateDate(studentID)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 9\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: `date-${studentID}`,\n                    children: \"Date Added\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 9\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"date-box\",\n                    id: `date-box-${studentID}`,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"date-checked\",\n                      id: `date-checked-${studentID}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 13\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 9\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 5\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No veterans matching search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n_s(SecurePage, \"zgNyYy1TkiezW0+CeS6joFMEyrM=\");\n_c = SecurePage;\nexport default SecurePage;\nvar _c;\n$RefreshReg$(_c, \"SecurePage\");","map":{"version":3,"names":["React","useState","useEffect","Search","jsxDEV","_jsxDEV","SecurePage","_s","data","setData","searchTerm","setSearchTerm","fetchData","response","fetch","result","json","error","console","requiredDocsMapping","filteredData","filter","item","fullName","lastName","firstName","split","map","name","trim","displayName","toLowerCase","startsWith","cleanBenefit","benefit","includes","getCleanedBenefits","benefits","Boolean","join","getRequiredDocs","benefitString","requiredDocsSet","Set","forEach","cleanedBenefit","docs","doc","add","Array","from","handleCheckboxChange","checkboxId","benefitId","checkbox","document","getElementById","benefitBox","checked","classList","remove","updateDate","studentID","dateBox","currentDate","Date","toLocaleString","month","day","textContent","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","length","index","requiredDocs","docIndex","type","id","onChange","htmlFor","_c","$RefreshReg$"],"sources":["C:/Veterans Center/veteran-app/frontend/src/components/checklist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Search from './searchfunction';\r\nimport './checklist.css';\r\n\r\nconst SecurePage = () => {\r\n    const [data, setData] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    // Function to fetch data from the server\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:3000/api/data/scan');\r\n            const result = await response.json();\r\n            setData(result);\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    };\r\n\r\n    // Benefits to required documents logic\r\n    const requiredDocsMapping = {\r\n        'Chapter 30': ['COE', 'Enrollment Manager', 'Schedule'],\r\n        'Chapter 31': ['Enrollment Manager', 'Schedule'],\r\n        'Chapter 33 Post 9/11': ['COE', 'Enrollment Manager', 'Schedule'],\r\n        'Chapter 35': ['COE', 'Enrollment Manager', 'Schedule'],\r\n        'Fed TA': ['TAR', 'Enrollment Manager', 'Schedule'],\r\n        'State TA': ['Award Letter', 'Enrollment Manager', 'Schedule'],\r\n        'Missouri Returning Heroes': ['DD214', 'Enrollment Manager', 'Schedule'],\r\n    };\r\n\r\n    // Load data on component mount\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Filter data based on search term\r\n    const filteredData = data.filter((item) => {\r\n        const fullName = item[\"Last Name, First Name (Legal Name)\"];\r\n        if (!fullName) return false;\r\n\r\n        const [lastName, firstName] = fullName.split(',').map(name => name.trim());\r\n        const displayName = `${firstName} ${lastName}`;\r\n\r\n        return displayName.toLowerCase().startsWith(searchTerm.toLowerCase());\r\n    });\r\n\r\n    // Clean benefit function (maps benefit name to key in requiredDocsMapping)\r\n    const cleanBenefit = (benefit) => {\r\n        if (benefit.includes(\"Missouri Returning Heroes\")) {\r\n            return \"Missouri Returning Heroes\";\r\n        } else if (benefit.includes(\"Chapter 33 Post 9/11\")) {\r\n            return \"Chapter 33 Post 9/11\";\r\n        } else if (benefit.includes(\"Chapter 31 VocRehab\")) {\r\n            return \"Chapter 31\";\r\n        } else if (benefit.includes(\"State Tuition Assistance Deadline\")) {\r\n            return \"State TA\";\r\n        } else if (benefit.includes(\"Chapter 35\")) {\r\n            return \"Chapter 35\";\r\n        } else if (benefit.includes(\"Chapter 30 MGIB\")) {\r\n            return \"Chapter 30\";\r\n        } else if (benefit.includes(\"Federal Tuition Assistance Deadline\")) {\r\n            return \"Fed TA\";\r\n        } else {\r\n            return benefit;  // Fallback if benefit is not mapped\r\n        }\r\n    };\r\n\r\n    // Function to filter, clean, and join benefits\r\n    const getCleanedBenefits = (benefits) => {\r\n        if (typeof benefits !== 'string') return '';\r\n        return benefits.split(';')\r\n            .map(benefit => benefit.trim())  // Clean individual benefit\r\n            .map(cleanBenefit)  // Apply the cleanBenefit function\r\n            .filter(Boolean)  // Remove any empty strings\r\n            .join('; ');  // Join the cleaned benefits with a semicolon and space\r\n    };\r\n\r\n    // Function to get required documents based on cleaned benefits\r\n    const getRequiredDocs = (benefitString) => {\r\n        if (typeof benefitString !== 'string') {\r\n            return [];  // Return empty array if benefitString is invalid\r\n        }\r\n\r\n        const benefits = benefitString.split(';').map(benefit => benefit.trim());\r\n        const requiredDocsSet = new Set();  // Use a Set to avoid duplicates\r\n\r\n        benefits.forEach(benefit => {\r\n            const cleanedBenefit = cleanBenefit(benefit);\r\n            const docs = requiredDocsMapping[cleanedBenefit];\r\n            if (docs) {\r\n                docs.forEach(doc => requiredDocsSet.add(doc));  // Add docs to the set\r\n            }\r\n        });\r\n\r\n        return Array.from(requiredDocsSet);  // Convert the set back to an array\r\n    };\r\n\r\n    // Function to toggle the checkbox and update benefit box style\r\n    const handleCheckboxChange = (checkboxId, benefitId) => {\r\n        const checkbox = document.getElementById(checkboxId);\r\n        const benefitBox = document.getElementById(benefitId);\r\n        if (checkbox.checked) {\r\n            benefitBox.classList.add('active');\r\n        } else {\r\n            benefitBox.classList.remove('active');\r\n        }\r\n    };\r\n\r\n    // Function to update the date when the checkbox is checked\r\n    const updateDate = (studentID) => {\r\n        const dateBox = document.getElementById(`date-checked-${studentID}`);\r\n        const checkbox = document.getElementById(`date-${studentID}`);\r\n        const currentDate = new Date().toLocaleString('default', { month: '2-digit', day: '2-digit' });\r\n\r\n        if (checkbox.checked) {\r\n            dateBox.textContent = currentDate;\r\n        } else {\r\n            dateBox.textContent = '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"secure-page\">\r\n            <div className=\"content\">\r\n                <img src=\"https://i.imgur.com/SROEj2Q.jpeg\" alt=\"Company Logo\" className=\"company-logo\" />\r\n                {/* Search component */}\r\n                <Search searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\r\n\r\n                {filteredData.length > 0 ? (\r\n                    <table className=\"data-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"red-header\">Name</th>\r\n                                <th className=\"red-header\">Student ID</th>\r\n                                <th className=\"red-header\">Benefit</th>\r\n                                <th className=\"red-header\">Required Documents</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {filteredData.map((item, index) => {\r\n                                const fullName = item[\"Last Name, First Name (Legal Name)\"] || 'Unknown';\r\n                                const [lastName, firstName] = fullName.split(',').map(name => name.trim());\r\n                                const displayName = `${firstName} ${lastName}`;\r\n                                const studentID = item[\"Student ID # (This is NOT your Social Security Number or SSO ID)\"] || 'N/A';\r\n                                const benefits = item[\"Benefit you plan to utilize this term (check all that apply):\"];\r\n                                const requiredDocs = getRequiredDocs(benefits);\r\n\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{displayName}</td>\r\n                                        <td>{studentID}</td>\r\n                                        <td>{getCleanedBenefits(benefits)}</td>\r\n                                        <td>\r\n    {requiredDocs.length > 0 ? (\r\n        requiredDocs.map((doc, docIndex) => (\r\n            <div key={docIndex} className=\"checkbox-container\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id={`${doc}-${studentID}`}\r\n                    onChange={() => handleCheckboxChange(`${doc}-${studentID}`, `box-${doc}-${studentID}`)}\r\n                />\r\n                <label htmlFor={`${doc}-${studentID}`}>Added</label>\r\n                <div className=\"benefit-box\" id={`box-${doc}-${studentID}`}>\r\n                    <span>{doc}</span>\r\n                </div>\r\n            </div>\r\n        ))\r\n    ) : (\r\n        <div>No documents required</div>\r\n    )}\r\n\r\n    <div className=\"date-container\">\r\n        <input\r\n            type=\"checkbox\"\r\n            id={`date-${studentID}`}\r\n            onChange={() => updateDate(studentID)}\r\n        />\r\n        <label htmlFor={`date-${studentID}`}>Date Added</label>\r\n        <div className=\"date-box\" id={`date-box-${studentID}`}>\r\n            <span className=\"date-checked\" id={`date-checked-${studentID}`}></span>\r\n        </div>\r\n    </div>\r\n</td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <p>No veterans matching search</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SecurePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}